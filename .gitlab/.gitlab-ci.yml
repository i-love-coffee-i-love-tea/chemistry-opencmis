variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  BUILD_IMAGE: $INTERNAL_DOCKER_REGISTRY/$INTERNAL_IMAGE_NAME

# Variables used from the "Outside"
# INTERNAL_DOCKER_REGISTRY
# INTERNAL_IMAGE_NAME
# DEPENDENCYTRACK_URL
# DEPENDENCYTRACK_TOKEN

stages:
  - check
  - build
  - deploy

check pipeline vars:
  stage: check
  image: $BUILD_IMAGE
  script:
    - if [ -z "$OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN_NAME" ]; then echo "OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN_NAME is empty"; fi
    - if [ -z "$OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN" ]; then echo "OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN is empty"; fi

check dependencies:
  stage: check
  image: $BUILD_IMAGE
  script:
    - mvn $MAVEN_CLI_OPTS
      org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeAggregateBom
    - mvn $MAVEN_CLI_OPTS
      io.github.pmckeown:dependency-track-maven-plugin:1.6.0:upload-bom
      -Ddependency-track.dependencyTrackBaseUrl="$DEPENDENCYTRACK_URL"
      -Ddependency-track.apiKey="$DEPENDENCYTRACK_TOKEN"
    - mvn $MAVEN_CLI_OPTS
      io.github.pmckeown:dependency-track-maven-plugin:1.6.0:metrics
      -Ddependency-track.dependencyTrackBaseUrl="$DEPENDENCYTRACK_URL"
      -Ddependency-track.apiKey="$DEPENDENCYTRACK_TOKEN"

check qualitygate:
  stage: check
  image: $BUILD_IMAGE
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  dependencies:
    - check unittests
  cache:
    - key: "sonar-${CI_JOB_NAME}"
      paths:
        - .sonar/cache
  script:
    - mvn $MAVEN_CLI_OPTS -Dsonar.login=$SONARQUBE_TOKEN compile sonar:sonar
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH =~ /^[dD][eE][vV]*/
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_TAG

check unittests:
  stage: check
  image: $BUILD_IMAGE
  script:
    - mvn $MAVEN_CLI_OPTS clean test
  artifacts:
    when: always
    paths:
      - "*/*/target/surefire-reports/TEST-*.xml"
    reports:
      junit: "*/*/target/surefire-reports/TEST-*.xml"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev-main"

build:
  image: $BUILD_IMAGE
  stage: build
  script: 
    - mvn $MAVEN_CLI_OPTS install -DskipTests

deploy to  maven central:
  image: $BUILD_IMAGE
  stage: deploy
  variables:
    DISTRIBUTION_ID: ossrh
    DISTRIBUTION_URL: $MAVEN_CENTRAL_REPOSITORY_URL
    DISTRIBUTION_SNAPSHOT_ID: ossrh
    DISTRIBUTION_SNAPSHOT_URL: $MAVEN_CENTRAL_SNAPSHOT_REPOSITORY_URL
  script:
    # decode base64 key - because we store the key in a way that doesn't preserve newlines
    - cat $PGP_RELEASE_SIGNING_KEY | base64 -d > releases@kgs-software.com.signing-subkey.asc
    # import key
    - echo $PGP_RELEASE_SIGNING_KEY_PASSPHRASE | gpg --passphrase-fd 0 --pinentry-mode=loopback --import releases@kgs-software.com.signing-subkey.asc
    # print key info
    - gpg --list-keys
    - gpg --list-packets releases@kgs-software.com.signing-subkey.asc
    # package, sign, deploy
    - mvn -Dossrh.username=$OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN_NAME -Dossrh.password=$OSSRH_MAVEN_CENTRAL_REPOSITORY_TOKEN -Dgpg.passphrase="$PGP_RELEASE_SIGNING_KEY_PASSPHRASE" -Dgpg.keyname="$PGP_RELEASE_SIGNING_KEY_ID" package gpg:sign deploy  -DskipTests
  rules:
    - if: $CI_COMMIT_TAG

deploy to kgs nexus:
  image: $BUILD_IMAGE
  stage: deploy
  variables:
    DISTRIBUTION_ID: $MAVEN_DISTRIBUTION_ID
    DISTRIBUTION_URL: $INTERNAL_MAVEN_REPOSITORY
    DISTRIBUTION_SNAPSHOT_ID: $MAVEN_DISTRIBUTION_ID
    DISTRIBUTION_SNAPSHOT_URL: $INTERNAL_MAVEN_SNAPSHOT_REPOSITORY
  script:
    # only deploy SNAPSHOTs to local repository
    - |
      if mvn help:evaluate -Dexpression=project.version | grep SNAPSHOT; then
        # decode base64 key - because we store the key in a way that doesn't preserve newlines
        cat $PGP_RELEASE_SIGNING_KEY | base64 -d > releases@kgs-software.com.signing-subkey.asc
        # import key
        echo $PGP_RELEASE_SIGNING_KEY_PASSPHRASE | gpg --passphrase-fd 0 --pinentry-mode=loopback --import releases@kgs-software.com.signing-subkey.asc
        # print key info
        gpg --list-keys
        gpg --list-packets releases@kgs-software.com.signing-subkey.asc
        # package, sign, deploy
        mvn -Dgpg.passphrase="$PGP_RELEASE_SIGNING_KEY_PASSPHRASE" -Dgpg.keyname="$PGP_RELEASE_SIGNING_KEY_ID" package gpg:sign deploy  -DskipTests
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "dev-main" || $CI_COMMIT_BRANCH =~ /^DEV*/

